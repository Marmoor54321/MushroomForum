@{
    ViewData["Title"] = "Miejsca grzybobrania";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Styles {
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <style>
        #map {
            height: 80vh;
            width: 100%;
        }

        .leaflet-popup-content form {
            display: flex;
            flex-direction: column;
        }

        .star-rating {
            direction: rtl;
            display: flex;
            justify-content: start;
        }

            .star-rating input {
                display: none;
            }

            .star-rating label {
                font-size: 1.5em;
                color: #ccc;
                cursor: pointer;
                padding: 0 2px;
            }

            .star-rating input:checked ~ label {
                color: gold;
            }

            .star-rating label:hover,
            .star-rating label:hover ~ label {
                color: gold;
            }

    </style>
}

<h2>Miejsca grzybobrania</h2>
<div id="map"></div>

@section Scripts {
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script>
        const map = L.map('map').setView([52.0, 19.0], 6);
        let userMarker = null;
        let routeLine = null;
        const orsApiKey = "";
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
        }).addTo(map);
        function clearSpotsFromMap() {
    map.eachLayer(layer => {
        if ((layer instanceof L.Marker || layer instanceof L.CircleMarker || layer instanceof L.Polyline) &&
            layer !== userMarker && layer._url === undefined) {
            map.removeLayer(layer);
        }
    });

    if (routeLine) {
        map.removeLayer(routeLine);
        routeLine = null;
    }

    map.closePopup();
}
        function loadPins() {
            const url = `/MushroomSpots/GetAll?ts=${Date.now()}`; // dodanie znacznika czasu

            fetch(url)
                .then(res => res.json())
                .then(spots => {
                    spots.forEach(spot => {
                        const marker = L.marker([spot.latitude, spot.longitude]).addTo(map);
                        let rating = parseInt(spot.rating) || 0;
                        let stars = '★'.repeat(rating) + '☆'.repeat(5 - rating);

                        marker.bindPopup(`
                            <div id="popup-${spot.id}">
                                <b>${spot.name}</b><br>
                                ${spot.description}<br><br>
                                <div>${stars}</div>
                                <form onsubmit="deleteSpot(event, ${spot.id})">
                                    <button type="submit" class="nav-link nav-button-green">Usuń</button>
                                </form>
                                <button type="button" class="nav-link nav-button-green"
                                    onclick="event.stopPropagation(); showEditForm(${spot.id}, '${spot.name}', '${spot.description.replace(/'/g, "\\'")}', ${spot.rating})">
                                    Edytuj</button>
                                <button class="nav-link nav-button-green" onclick="drawRoute(${spot.latitude}, ${spot.longitude})">Wyznacz trasę</button>
                            </div>
                        `);
                    });
                });
        }

        function showEditForm(id, name, description, rating = 0) {
            const container = document.getElementById(`popup-${id}`);
            if (!container) return;

            const safeName = name.replace(/"/g, '&quot;');
            const safeDescription = description
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;");

            container.innerHTML = `
                <form onsubmit="editSpot(event, ${id})" onclick="event.stopPropagation()">
                    <input type="text" name="name" value="${safeName}" required /><br>
                    <textarea name="description">${safeDescription}</textarea><br>

                    <label>Ocena:</label>
                    <div class="star-rating">
                        ${[5, 4, 3, 2, 1].map(star => `
                            <input type="radio" name="rating" value="${star}" id="edit-star-${star}-${id}" ${rating === star ? 'checked' : ''}>
                            <label for="edit-star-${star}-${id}">★</label>
                        `).join('')}
                    </div>

                    <button class="nav-link nav-button-green" type="submit">Zapisz</button>
                </form>
            `;
        }

        function editSpot(event, id) {
            event.preventDefault();
            const form = event.target;
            const name = form.name.value;
            const description = form.description.value;
            const rating = parseInt(form.rating.value);


            fetch('/MushroomSpots/Edit', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ id, name, description, rating })


            }).then(res => {
                if (res.ok) {
                    clearSpotsFromMap();
                    setTimeout(() => {
                        loadPins();
                        map.closePopup();
                    }, 300);
                }
                 else {
                    alert("Nie udało się zaktualizować pinezki.");
                }
            });
        }

        function deleteSpot(event, id) {
            event.preventDefault();
            if (confirm("Czy na pewno chcesz usunąć to miejsce?")) {
                fetch('/MushroomSpots/Delete', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(id)
                }).then(res => {
                    if (res.ok) {
                        clearSpotsFromMap();
                        setTimeout(() => {
                            loadPins();
                            map.closePopup();
                        }, 300); 
                    }
                     else {
                        alert("Nie udało się usunąć pinezki.");
                    }
                });
            }
        }
        function drawRoute(destLat, destLng) {
            if (!userLocation) {
                alert("Nie udało się uzyskać lokalizacji użytkownika.");
                return;
            }
            const url = `https://api.openrouteservice.org/v2/directions/driving-car?api_key=${orsApiKey}`;


            fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    coordinates: [
                        [userLocation[1], userLocation[0]], // lng, lat
                        [destLng, destLat] // lng, lat
                    ]
                })
            })
            .then(res => {
                if (!res.ok) throw new Error("Błąd odpowiedzi z serwera");
                return res.json();
            })
            .then(data => {
                if (routeLine) {
                    map.removeLayer(routeLine);
                }

                const routeCoords = data.features[0].geometry.coordinates.map(c => [c[1], c[0]]); // API -> Leaflet
                routeLine = L.polyline(routeCoords, { color: 'blue', weight: 4 }).addTo(map);
                map.fitBounds(routeLine.getBounds());
            })
            .catch(err => {
                console.error("Błąd podczas wyznaczania trasy:", err);
                alert("Nie udało się wyznaczyć trasy.");
            });
        }


        map.on('click', function (e) {
            const lat = e.latlng.lat;
            const lng = e.latlng.lng;

            const popup = L.popup()
                .setLatLng(e.latlng)
                .setContent(`
                            <form method="post" action="/MushroomSpots/Create">
                                <input name="Name" placeholder="Nazwa" required />
                                <textarea name="Description" placeholder="Opis"></textarea>
                                <input type="hidden" name="Latitude" value="${lat}" />
                                <input type="hidden" name="Longitude" value="${lng}" />
                                         <label>Ocena:</label>
                    <div class="star-rating">
                        <input type="radio" name="Rating" value="5" id="star5"><label for="star5">★</label>
                        <input type="radio" name="Rating" value="4" id="star4"><label for="star4">★</label>
                        <input type="radio" name="Rating" value="3" id="star3"><label for="star3">★</label>
                        <input type="radio" name="Rating" value="2" id="star2"><label for="star2">★</label>
                        <input type="radio" name="Rating" value="1" id="star1"><label for="star1">★</label>
                    </div>
                                <button type="submit">Dodaj</button>
                            </form>`)
                .openOn(map);
        });
        loadPins();
        // Geolokalizacja użytkownika – niebieska kropka
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                const lat = position.coords.latitude;
                const lng = position.coords.longitude;
                userLocation = [lat, lng];
                if (userMarker) {
                    map.removeLayer(userMarker);
                }
                userMarker = L.circleMarker([lat, lng], {
                    radius: 6,
                    fillColor: "#007bff",
                    color: "#fff",
                    weight: 1,
                    opacity: 1,
                    fillOpacity: 0.9
                }).addTo(map).bindPopup("Tu jesteś!");


                map.setView([lat, lng], 10);
            }, function (error) {
                console.warn("Nie udało się uzyskać lokalizacji użytkownika:", error.message);
            });
        } else {
            alert("Twoja przeglądarka nie wspiera geolokalizacji.");
        }
    </script>

}
